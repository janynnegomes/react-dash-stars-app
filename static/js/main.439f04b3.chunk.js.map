{"version":3,"sources":["components/Star.js","components/Users.js","App.js","serviceWorker.js","index.js"],"names":["Star","state","list","Button","variant","style","color","this","props","icon","Component","Users","axios","get","then","res","setState","data","console","log","catch","err","Card","Body","map","user","className","key","id","Row","Col","sm","Image","src","avatar","height","roundedCircle","first_name","last_name","email","library","add","faStar","App","Navbar","bg","Brand","href","Nav","Link","Container","Jumbotron","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6VA0BeA,E,2MApBXC,MAAQ,CACJC,KAAM,M,qHASN,OACA,oCAEI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,MAAO,CAACC,MAAMC,KAAKC,MAAMF,QAAQ,kBAAC,IAAD,CAAiBG,KAAK,e,GAf1EC,a,iBCkDJC,E,2MA/CXV,MAAQ,CACJC,KAAM,M,mFAGU,IAAD,OACfU,IAAMC,IAAI,sCACTC,MAAM,SAACC,GACJ,EAAKC,SAAS,CAACd,KAAMa,EAAIE,KAAKA,OAAQC,QAAQC,IAAIJ,EAAIE,KAAKA,SAC9DG,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,Q,+BAK1B,OACA,oCACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,KAAN,KACEhB,KAAKN,MAAMC,KACPK,KAAKN,MAAMC,KAAKsB,KAAK,SAAAC,GAAI,OACvB,kBAACH,EAAA,EAAD,CAAMI,UAAU,MAAMC,IAAKF,EAAKG,IAC5B,kBAACN,EAAA,EAAKC,KAAN,KACA,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAOC,IAAKR,EAAKS,OAAQ7B,MAAO,CAAC8B,OAAO,IAAKC,eAAa,KAE9D,kBAACN,EAAA,EAAD,CAAKC,GAAI,IACL,4BAAKN,EAAKY,WAAV,IAAuBZ,EAAKa,WAC5B,4BAAKb,EAAKc,QAEd,kBAACT,EAAA,EAAD,CAAKC,GAAI,GACL,kBAAC,EAAD,CAAMzB,MAAM,eAMlB,0D,GAtCVI,a,gDCKpB8B,IAAQC,IAAKC,KA4BEC,MA1Bf,WACE,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOzC,QAAQ,QACxB,kBAACwC,EAAA,EAAOE,MAAR,CAAcC,KAAK,SAAnB,QAAgC,kBAAC,IAAD,CAAiBtC,KAAK,SAAtD,UACA,kBAACuC,EAAA,EAAD,CAAKtB,UAAU,WACb,kBAACsB,EAAA,EAAIC,KAAL,CAAUF,KAAK,SAAf,QACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,YAAf,YACA,kBAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,UAAf,WAIJ,kBAACG,EAAA,EAAD,CAAWxB,UAAU,YACjB,kBAACyB,EAAA,EAAD,KACE,wBAAIzB,UAAU,eAAd,yBAEF,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,WClBMsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,kB","file":"static/js/main.439f04b3.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Button, Card } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass Star extends Component {\n\n    state = {\n        list: null\n    }\n\n    componentDidMount(){\n       \n    }\n    \n    render(){\n\n        return (\n        <>                            \n                        \n            <Button variant=\"default\" style={{color:this.props.color}}><FontAwesomeIcon icon=\"star\"/></Button>               \n        </>\n        );\n    }\n    \n}\n\nexport default Star;","import React, {Component} from 'react';\nimport { Image, Card , Row, Col} from 'react-bootstrap';\nimport Star from './Star';\nimport axios from 'axios';\n\nclass Users extends Component {\n\n    state = {\n        list: null\n    }\n\n    componentDidMount(){\n        axios.get('https://reqres.in/api/users?page=2')\n        .then( (res)=> {\n            this.setState({list: res.data.data}); console.log(res.data.data)})\n        .catch(err => console.log(err));\n    }\n    \n    render(){\n\n        return (\n        <>\n            <Card >\n                <Card.Body>   \n                { this.state.list \n                    ? this.state.list.map( user =>\n                        <Card className=\"b-0\" key={user.id}>\n                            <Card.Body> \n                            <Row >\n                                <Col sm={1}>\n                                    <Image src={user.avatar} style={{height:50}} roundedCircle />                    \n                                </Col>\n                                <Col sm={10}>\n                                    <h4>{user.first_name} {user.last_name}</h4>\n                                    <h6>{user.email}</h6>\n                                </Col>\n                                <Col sm={1}>\n                                    <Star color=\"red\"/>\n                                </Col>\n                            </Row>\n                            </Card.Body>\n                            </Card>\n                            )\n                            : <h6>Nothing here yet...</h6>\n                          \n                        }\n                </Card.Body>\n            </Card>        \n        </>\n        );\n    }\n    \n}\n\nexport default Users;","import React from 'react';\nimport './App.css';\n\nimport Users from './components/Users';\nimport { Container, Col, Row, Jumbotron, Navbar, Nav } from 'react-bootstrap';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n \nlibrary.add( faStar);\n\nfunction App() {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Dash <FontAwesomeIcon icon=\"star\" />  App </Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <Nav.Link href=\"#mystars\">My Stars</Nav.Link>\n          <Nav.Link href=\"#about\">About</Nav.Link>\n        </Nav>\n        \n      </Navbar>\n      <Container className=\"border-1\">\n          <Jumbotron>\n            <h1 className=\"text-center\">React Dash Stars App</h1>\n          </Jumbotron>\n          <Row>            \n            <Col>\n              <Users/>\n            </Col>\n          </Row>     \n        </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}